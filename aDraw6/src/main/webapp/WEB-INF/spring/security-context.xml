<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd"
>
 	<!-- 맨 처음 설정시 테스트 -->
 	<!--
	<http pattern="/" security="none"></http>
	<http pattern="/**" security="none"></http>
	<http auto-config="true" use-expressions = "true"></http>
	  -->
<http auto-config="true" use-expressions = "true">
		<access-denied-handler error-page="/main" /> <!-- 로그인 이후 금지된 요청(다시 로그인 페이지로,회원 가입 등) -->
		
		 <!-- security에서는 기본적으로 ifame사용을 제한하는데 이를 풀기위함 -->
	 <headers>
			<frame-options disabled="true"></frame-options>
	</headers>
	
	<!-- 각 요청별 권한 지정은  intercept-url태그 사용 지정 -->	
	<!--pattern은 요청경로 속성, access는 접근 대상 지정  -->
	<intercept-url pattern="/" access="permitAll"/> <!-- 맨처음 접근 페이지(로그인 포함) -->
	<intercept-url pattern="/main/**" access="permitAll" />
	<intercept-url pattern="/images/**" access="permitAll" />
	<intercept-url pattern="/processLogin" access="permitAll" /> <!-- 로그인 실패시 요청 경로 -->
	<intercept-url pattern="/home" access="isAnonymous()" />
	<intercept-url pattern="/loginView" access="isAnonymous()" /> <!-- 로그인창 이동 요청 -->
	<intercept-url pattern="/joinView" access="isAnonymous()" /> <!-- 회원가입창이동 요청 -->
	<intercept-url pattern="/join" access="isAnonymous()" />
	<intercept-url pattern="/login" access="isAnonymous()" /> <!-- 로그인을 안한 사람만 접근 -->
	
	<intercept-url pattern="/p1" access="permitAll"/>
	<intercept-url pattern="/p2" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')"/>
	<intercept-url pattern="/p3" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')"/>
	<intercept-url pattern="/p4" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')"/>	
	<intercept-url pattern="/p5" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')"/>
	
	<intercept-url pattern="/About" access="permitAll"/>
	<intercept-url pattern="/image/**" access="permitAll"/>
	<intercept-url pattern="/upimage/**" access="permitAll"/>
	<intercept-url pattern="/h_upcoming" access="permitAll"/>			
	<intercept-url pattern="/raffleUpload" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGE')"/>		
	<intercept-url pattern="/addtoCalendar" access="isAuthenticated()"/>
	<intercept-url pattern="/h_raffle" access="permitAll"/>
	<intercept-url pattern="/raffleInfoUpload" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGE')"/>		
	<intercept-url pattern="/raffleListDelete" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGE')"/> 
	<intercept-url pattern="/replyWrite" access="isAuthenticated()"/>
	<intercept-url pattern="/replyDelete" access="isAuthenticated()"/>
	<intercept-url pattern="/plist" access="permitAll"/>
	<intercept-url pattern="/h_calendar" access="isAuthenticated()"/>
	<intercept-url pattern="/myRaffleCalendarUpdate" access="isAuthenticated()"/>
	<intercept-url pattern="/myRaffleCalendarInsert" access="isAuthenticated()"/>
	<intercept-url pattern="/myRaffleCalendarDelete" access="isAuthenticated()"/>			
	
	
	
	
	
	
	


	<!-- 모든 요 청이 로그인 성공후 접근 가능 -->
	<!-- intercept-url 우선 순위는 위에 있을수록 높음 -->
	<!--  isAnonymous()나 hasRole()은 spring EL제공 메서드 -->
	<!-- Role등급은 ROLE_USER,ROLE_ADMIN,ROLE_MANAGE 등이 있음 -->

	
<!--<intercept-url pattern="/**" access="hasRole('ROLE_USER')" requires-channel="https"/>	-->
<!--<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')" requires-channel="https"/>	-->
	
	
	
	
	<!-- form-login은 로그인 관련 사항 설정 -->
	<form-login
		login-processing-url = "/login" 
		login-page="/loginView" 
		username-parameter="pid"
		password-parameter="ppw" 
		default-target-url="/main"
		authentication-failure-url="/processLogin?error=1"  
		always-use-default-target='true'
	/>
	<!-- 
			form-login 태그는  로그인 관련 사항 설정하며 속성으로 처리
			html form에서 action속성 값으로 기본값은 login이며 이때는 action="login"
			login-processing-url 속성은 login요청 경로 이며 login시는 생략
			login-page속성은 로그인 창의 요청 경로
			username-parameter는 form에서 id를 나타내는 name속성 값 input type="text" name="pid"
			default-target-url속성은 로그인 성공시 이동할 요청경로
			authentication-failure-url속성은 로그인인증 실패시 요청 경로
			always-use-default-target속성은 성공시 가는 default-target-url="/main"를 확실히 보장 해주기 위해 설정
		 -->
		 
	 <!-- logout태그는 로그아웃처리(스프링에서는 로그아웃도 form을 이용해 해야함 -->
		 <logout invalidate-session="true" logout-url="/logout"
		 	logout-success-url="/processLogin?logout=1" delete-cookies="JSESSIONID,remember-me"/>
		 <!--invalidate-session="true"는 세션 초기화 logout-url="/logout"은 로그아웃처리경로 logout-success-url은 로그아웃 이후 요청경로-->
		 <!--delete-cookies는 쿠키 삭제 기본인 JSESSIONID와  remember-me시 사용하는 remember-me 쿠키 삭제  -->
		 
	<!-- 명시적으로 로그아웃하지 않았을때 다시 사이트 입장하면 로그인 상태 유지됨  -->	
		 <remember-me remember-me-parameter="remember-me" remember-me-cookie="remember-me" 
		 	key="kookskey" token-validity-seconds="3600"/>	
		 
		 <!--사이트 간 요청 위조 CSRF(Cross-site Request Forgery)는 다른 사이트에서 페이지를 위조하여
		     접근하는 해킹을 말하며 spring security는 이를 예방 할수 있다  -->	
		 <csrf disabled="false"/>  <!-- 기본값으로 csrf예방 기능 동작 --> 
		 <!-- default는 false이며 true로 해야 ajax와 파일업로드 됨-->
		 <!-- 그러나 input로  hidden으로 csrf보내면 false일때도 됨-->
		 <!-- 단 file업로드시는 input로 처리하지 않고 action뒤에 csrf를 주면되고 form이 아닌 링크 a는 get방식으로 ajax로 보냄 -->
</http>

	 <!-- DB이용 인증처리(authentication) -->
	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>
	<!--user-service-ref="customUserDetailsService"객체를 나타내는 bean  -->
	<!-- 인증처리 클래스로 UserDetailsService인터페이스를 구현한 클래스로 개발자가 만듬 -->
	<beans:bean id="customUserDetailsService" class="com.project.draw.security.CustomUserDetailsService" />
	<!-- 암호화 된 패스워드 처리 빈 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans:beans>